name: Windows CI

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  push:
    branches: [ master, jbenden-patch-1 ]
    paths-ignore:
      - contrib/**
      - manpages/**
      - patches/**

  pull_request:
    branches: [ master, jbenden-patch-1 ]
    paths-ignore:
      - contrib/**
      - manpages/**
      - patches/**

jobs:
  cygwin_32bit:
    runs-on: windows-latest

    steps:
      - run: git config --global core.autocrlf input
      - run: git config --global core.eol lf
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            C:\tools\cygwin\**
          key: ${{ runner.os }}-cygwin-32bit-${{ hashFiles('.github/workflows/windows.yml') }}
          restore-keys: ${{ runner.os }}-cygwin-32bit-
    
      - name: Set up Cygwin
        if: steps.cache.outputs.cache-hit != 'true'
        uses: egor-tensin/setup-cygwin@v3
        with:
          platform: x86
          install-dir: C:\tools\cygwin
          hardlinks: 1
          packages: >-
            autoconf automake bison gcc-core gcc-g++ mingw-runtime mingw-binutils mingw-gcc-core
            mingw-gcc-g++ mingw-pthreads mingw-w32api libtool make python gettext-devel gettext
            intltool libiconv pkg-config git wget curl libpcre-devel libssl-devel libsqlite3-devel
            zlib-devel unzip zip rsync expect libhwloc-devel ccache cmocka

      - name: Create home dir
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          C:\tools\cygwin\bin\bash.exe --login -c 'env'

      - name: Find Cygwin path to workspace
        id: cygwin
        run: |
          function Exec-External {
            param(
              [Parameter(Position=0,Mandatory=1)][scriptblock] $command
            )
            & $command 2>&1 | %{ "$_" }
            if ($LASTEXITCODE -ne 0) {
              throw ("Command returned non-zero error-code ${LASTEXITCODE}: $command")
            }
          }
          $unix_path = (Exec-External {& C:\tools\cygwin\bin\bash.exe --login -e -c "cygpath '${env:GITHUB_WORKSPACE}'"})
          Write-Host "::set-output name=unix_path::${unix_path}"

      - name: Download AirPcap sources
        run: |
          C:\tools\cygwin\bin\bash.exe -e -l -c "cd ${{ steps.cygwin.outputs.unix_path }} && curl -RLO https://dl.aircrack-ng.org/AirPcap_Devpack_4_1_1_1838.zip"

      - name: Verify digest of AirPcap sources
        shell: pwsh
        run: |
          $hashFromFile = Get-FileHash -Path "AirPcap_Devpack_4_1_1_1838.zip" -Algorithm SHA256
          if ($hashFromFile.Hash -ne "86dcde46603cd1229245263499ef9cb4e43ee66cd7219605d30095562888da14") {
            Write-Host "AirPcap failed digest check." -ForegroundColor Red
            $hashFromFile | Format-List
            Break
          }

      - name: Decompress AirPcap sources
        run: |
          C:\tools\cygwin\bin\bash.exe -e -l -c "cd ${{ steps.cygwin.outputs.unix_path }} && 7z -y x AirPcap_Devpack_4_1_1_1838.zip"

      - name: Perform compilation
        run: |
          C:\tools\cygwin\bin\bash.exe -e -l -c "cd ${{ steps.cygwin.outputs.unix_path }} && cp -vfp Airpcap_Devpack/bin/x86/airpcap.dll /cygdrive/c/Windows/System32"
          C:\tools\cygwin\bin\bash.exe -e -l -c "cd ${{ steps.cygwin.outputs.unix_path }} && dlltool -D Airpcap_Devpack/bin/x86/airpcap.dll -d build/airpcap.dll.def -l Airpcap_Devpack/bin/x86/libairpcap.dll.a"

      - name: Build w/o AirPcap
        run: |
          C:\tools\cygwin\bin\bash.exe -e -l -c "cd ${{ steps.cygwin.outputs.unix_path }} && ./build/cygwin.sh gcc --enable-maintainer-mode --with-experimental"

      - name: Build w/AirPcap
        env:
          CFLAGS: "-O3 -mtune=i686 -DNDEBUG"
          LDFLAGS: "-Wl,--enable-auto-image-base"
        run: |
          New-Variable bash -Value "C:\tools\cygwin\bin\bash.exe" -Option Constant
          echo @"
            cd ${{ steps.cygwin.outputs.unix_path }}
            make distclean
            autoreconf -vi
            mkdir 32bit
            cd 32bit
            ../configure --host=i686-pc-cygwin --target=i686-pc-cygwin --without-opt --with-experimental --enable-win32-portable --enable-maintainer-mode --with-airpcap=${{ steps.cygwin.outputs.unix_path }}
            make -j2
            make -j2 check
            cd ..
          "@ | & $bash --login -o errexit -o nounset -o pipefail -o igncr
        shell: pwsh

      - name: Archive 32-bit artifacts
        uses: actions/upload-artifact@v2
        with:
          name: 32bit
          path: |
            32bit
            !32bit/**/*.a
            !32bit/**/*.la
            !32bit/**/*.lib
            !32bit/**/*.o
            !32bit/**/*.lo
            !32bit/**/*.obj

  gui:
    runs-on: windows-latest

    steps:
      - run: git config --global core.autocrlf input
      - run: git config --global core.eol lf
        
      - uses: actions/checkout@v2
        
      - name: Checkout GUI source code
        shell: pwsh
        run: |
          git clone --no-checkout --depth 1 --single-branch --branch Windows https://github.com/aircrack-ng/aircrack-ng.git gui
          Push-Location gui
          git reset --hard
          Pop-Location

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build
        shell: pwsh
        run: |
          Push-Location gui/GUI
          msbuild Aircrack-ng.sln /p:Configuration=Release /p:Platform="Any CPU"
          Pop-Location

      - name: Archive GUI artifacts
        uses: actions/upload-artifact@v2
        with:
          name: gui
          path: |
            gui
            !gui/**/.git*
